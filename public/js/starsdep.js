// public/js/starsdep.js - Telegram Stars Top-Up Module
(() => {
    console.log('[STARS] ‚≠ê Initializing Stars top-up module');
  
    // ====== –ö–û–ù–§–ò–ì ======
    const MIN_STARS = 1;
  
    // ====== DOM ======
    const sheet = document.getElementById("starsDepositSheet");
    if (!sheet) {
      console.warn('[STARS] ‚ö†Ô∏è starsDepositSheet not found in DOM');
      return;
    }
  
    const backdrop = sheet.querySelector(".sheet__backdrop");
    const btnClose = document.getElementById("starsDepClose");
    const amountInput = document.getElementById("starsDepAmount");
    const btnBuy = document.getElementById("btnBuyStarsNow");
    const starsPill = document.getElementById("starsPill");
  
    // ====== HELPERS ======
    const tg = window.Telegram?.WebApp;
    const tgUserId = tg?.initDataUnsafe?.user?.id || "guest";
    const initData = tg?.initData || "";
  
    function openSheet() {
      console.log('[STARS] üìÇ Opening sheet');
      sheet?.classList.add("sheet--open");
      renderUI();
      if (tg?.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('light');
      }
    }
  
    function closeSheet() {
      sheet?.classList.remove("sheet--open");
    }
  
    backdrop?.addEventListener("click", closeSheet);
    btnClose?.addEventListener("click", closeSheet);
  
    amountInput?.addEventListener("input", () => {
      const caret = amountInput.selectionStart;
      // –¢–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –¥–ª—è Stars
      amountInput.value = amountInput.value.replace(/[^0-9]/g, "");
      try { amountInput.setSelectionRange(caret, caret); } catch {}
      renderUI();
    });
  
    // ====== –ö–õ–ò–ö –ù–ê STARS PILL ======
    starsPill?.addEventListener("click", (e) => {
      e.preventDefault();
      console.log('[STARS] üîò Stars pill clicked');
      openSheet();
    });
  
    // ====== –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í –ë–û–¢ ======
    async function notifyBot(amount, invoiceId = null) {
      try {
        const response = await fetch("/api/deposit-notification", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            amount,
            currency: 'stars',
            initData,
            userId: tgUserId,
            invoiceId,
            timestamp: Date.now()
          })
        });
  
        if (response.ok) {
          console.log('[STARS] ‚úÖ Bot notified');
        } else {
          console.warn('[STARS] ‚ö†Ô∏è Bot notification failed');
        }
      } catch (error) {
        console.error('[STARS] ‚ùå Bot notification error:', error);
      }
    }
  
    // ====== –°–û–ó–î–ê–ù–ò–ï STARS INVOICE ======
    async function createStarsInvoice(amount) {
      console.log('[STARS] üí´ Creating invoice for', amount, 'Stars');
  
      try {
        const response = await fetch('/api/create-stars-invoice', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            amount,
            userId: tgUserId,
            initData
          })
        });
  
        console.log('[STARS] Response status:', response.status);
  
        if (!response.ok) {
          const errorText = await response.text();
          console.error('[STARS] Server error:', errorText);
          throw new Error(`Server returned ${response.status}: ${errorText}`);
        }
  
        const data = await response.json();
        console.log('[STARS] Invoice data:', data);
  
        if (!data.ok || !data.invoiceLink) {
          throw new Error(data.error || 'Invalid invoice response');
        }
  
        return data;
  
      } catch (error) {
        console.error('[STARS] ‚ùå Error creating invoice:', error);
        throw error;
      }
    }
  
    // ====== –û–ë–†–ê–ë–û–¢–ö–ê STARS PAYMENT ======
    async function processStarsPayment(amount) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ tg.openInvoice
      if (!tg?.openInvoice) {
        console.error('[STARS] ‚ùå openInvoice not available');
        const msg = 'Stars payment is only available in Telegram Mini App';
        if (tg?.showAlert) {
          tg.showAlert(msg);
        } else {
          alert(msg);
        }
        return false;
      }
  
      try {
        console.log('[STARS] üí≥ Processing payment for', amount, 'Stars');
  
        // –°–æ–∑–¥–∞–µ–º invoice –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        const invoiceData = await createStarsInvoice(amount);
  
        console.log('[STARS] üé´ Opening invoice:', invoiceData.invoiceLink);
  
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º invoice –≤ Telegram
        tg.openInvoice(invoiceData.invoiceLink, async (status) => {
          console.log('[STARS] üìã Invoice status:', status);
  
          if (status === 'paid') {
            console.log('[STARS] ‚úÖ Payment successful!');
  
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –±–æ—Ç
            await notifyBot(amount, invoiceData.invoiceId);
  
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (tg?.showPopup) {
              tg.showPopup({
                title: '‚úÖ Payment Successful',
                message: `You've topped up ${amount} ‚≠ê Stars!`,
                buttons: [{ type: 'ok' }]
              });
            } else if (tg?.showAlert) {
              tg.showAlert(`‚úÖ ${amount} ‚≠ê Stars added!`);
            }
  
            if (tg?.HapticFeedback) {
              tg.HapticFeedback.notificationOccurred('success');
            }
  
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            setTimeout(() => {
              window.dispatchEvent(new CustomEvent('balance:update', {
                detail: { stars: amount }
              }));
            }, 1000);
  
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º sheet
            setTimeout(() => {
              if (amountInput) amountInput.value = '';
              closeSheet();
            }, 1500);
  
          } else if (status === 'cancelled') {
            console.log('[STARS] ‚ö†Ô∏è Payment cancelled by user');
  
            if (tg?.HapticFeedback) {
              tg.HapticFeedback.notificationOccurred('warning');
            }
  
          } else if (status === 'failed') {
            console.error('[STARS] ‚ùå Payment failed');
  
            if (tg?.showAlert) {
              tg.showAlert('Payment failed. Please try again.');
            }
  
            if (tg?.HapticFeedback) {
              tg.HapticFeedback.notificationOccurred('error');
            }
          }
        });
  
        return true;
  
      } catch (error) {
        console.error('[STARS] ‚ùå Payment error:', error);
  
        let errorMsg = 'Failed to process payment';
        if (error.message.includes('404')) {
          errorMsg = 'Server endpoint not found. Please check API configuration.';
        } else if (error.message.includes('500')) {
          errorMsg = 'Server error. Please try again later.';
        } else if (error.message) {
          errorMsg = error.message;
        }
  
        if (tg?.showAlert) {
          tg.showAlert(errorMsg);
        } else {
          alert(errorMsg);
        }
  
        if (tg?.HapticFeedback) {
          tg.HapticFeedback.notificationOccurred('error');
        }
  
        return false;
      }
    }
  
    // ====== –ü–û–ö–£–ü–ö–ê STARS ======
    btnBuy?.addEventListener("click", async (e) => {
      e.preventDefault();
      e.stopPropagation();
  
      const amount = parseInt(amountInput?.value) || 0;
  
      console.log('[STARS] üõí Buy button clicked. Amount:', amount);
  
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
      if (amount < MIN_STARS) {
        const msg = `Minimum purchase is ${MIN_STARS} ‚≠ê`;
        console.warn('[STARS]', msg);
        if (tg?.showAlert) {
          tg.showAlert(msg);
        } else {
          alert(msg);
        }
        return;
      }
  
      const old = btnBuy.textContent;
      btnBuy.disabled = true;
      btnBuy.textContent = "Opening payment...";
  
      if (tg?.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('medium');
      }
  
      const success = await processStarsPayment(amount);
  
      if (!success) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        btnBuy.textContent = old || "Buy Stars";
        btnBuy.disabled = false;
      } else {
        // –ü—Ä–∏ —É—Å–ø–µ—Ö–µ –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è invoice
        setTimeout(() => {
          btnBuy.textContent = old || "Buy Stars";
          btnBuy.disabled = false;
        }, 2000);
      }
    });
  
    // ====== UI –°–û–°–¢–û–Ø–ù–ò–ï ======
    function renderUI() {
      const amount = parseInt(amountInput?.value) || 0;
  
      console.log('[STARS] üé® renderUI: amount=', amount);
  
      // –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—É–º–º–∞ >= –º–∏–Ω–∏–º—É–º–∞
      if (btnBuy) {
        btnBuy.disabled = amount < MIN_STARS;
      }
    }
  
    // –ü–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    renderUI();
  
    console.log('[STARS] ‚úÖ Stars top-up module initialized');
  
    // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
    window.WTStarsDeposit = {
      openSheet,
      closeSheet,
      isAvailable: () => !!tg?.openInvoice
    };
  })();